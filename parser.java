
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\016\004\000\002\016\002" +
    "\000\002\017\004\000\002\017\002\000\002\004\007\000" +
    "\002\004\006\000\002\004\010\000\002\006\004\000\002" +
    "\006\002\000\002\005\014\000\002\005\014\000\002\007" +
    "\003\000\002\007\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\025\003\000" +
    "\002\025\002\000\002\024\005\000\002\024\003\000\002" +
    "\011\004\000\002\011\006\000\002\026\004\000\002\026" +
    "\002\000\002\012\010\000\002\012\007\000\002\012\006" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\006\000\002\012\007\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\007\000\002\013\004\000\002\013\002\000\002\014\003" +
    "\000\002\014\006\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\003\000\002\023\002\000\002\015" +
    "\003\000\002\015\005\000\002\015\006\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\004\005\001\002\000\004\002\274\001" +
    "\002\000\004\005\006\001\002\000\004\030\007\001\002" +
    "\000\020\006\020\007\010\010\021\011\012\012\022\013" +
    "\016\031\ufffa\001\002\000\006\005\ufff0\027\ufff0\001\002" +
    "\000\016\007\010\010\021\011\012\012\022\013\016\031" +
    "\ufffa\001\002\000\006\005\uffee\027\uffee\001\002\000\004" +
    "\031\270\001\002\000\020\006\020\007\010\010\021\011" +
    "\012\012\022\013\016\031\ufffa\001\002\000\004\031\ufffe" +
    "\001\002\000\004\005\256\001\002\000\004\005\124\001" +
    "\002\000\012\007\010\010\021\011\012\012\022\001\002" +
    "\000\006\005\uffef\027\uffef\001\002\000\006\005\uffed\027" +
    "\uffed\001\002\000\004\005\024\001\002\000\006\014\ufff5" +
    "\057\025\001\002\000\030\005\036\026\043\034\032\035" +
    "\042\036\037\037\044\040\033\041\035\044\034\045\030" +
    "\062\040\001\002\000\004\014\027\001\002\000\040\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\030" +
    "\ufff9\031\ufff9\001\002\000\030\005\036\026\043\034\032" +
    "\035\042\036\037\037\044\040\033\041\035\044\034\045" +
    "\030\062\040\001\002\000\046\014\uffcb\024\uffcb\025\uffcb" +
    "\027\uffcb\033\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\001\002\000\046\014\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\033\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\046\014\uffc4\024\uffc4" +
    "\025\uffc4\027\uffc4\033\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\001\002\000\030\005\036\026" +
    "\043\034\032\035\042\036\037\037\044\040\033\041\035" +
    "\044\034\045\030\062\040\001\002\000\046\014\uffc3\024" +
    "\uffc3\025\uffc3\027\uffc3\033\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\052\014\uffd5" +
    "\024\uffd5\025\uffd5\026\110\027\uffd5\032\111\033\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\046\014\uffc7\024\uffc7\025\uffc7\027\uffc7\033\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\030\005\036\026\043\034\032\035\042\036" +
    "\037\037\044\040\033\041\035\044\034\045\030\062\040" +
    "\001\002\000\034\014\ufff6\042\060\043\053\044\055\045" +
    "\051\046\062\047\057\050\064\051\061\052\056\053\054" +
    "\054\052\055\063\001\002\000\046\014\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\033\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\001\002\000\040\005\036\007\010" +
    "\010\021\011\012\012\022\026\043\034\032\035\042\036" +
    "\037\037\044\040\033\041\035\044\034\045\030\062\040" +
    "\001\002\000\046\014\uffc6\024\uffc6\025\uffc6\027\uffc6\033" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\036\024\102\027\101\042\060\043\053" +
    "\044\055\045\051\046\062\047\057\050\064\051\061\052" +
    "\056\053\054\054\052\055\063\001\002\000\004\027\047" +
    "\001\002\000\030\005\036\026\043\034\032\035\042\036" +
    "\037\037\044\040\033\041\035\044\034\045\030\062\040" +
    "\001\002\000\046\014\uffbe\024\uffbe\025\uffbe\027\uffbe\033" +
    "\uffbe\042\060\043\053\044\055\045\051\046\062\047\057" +
    "\050\064\051\061\052\056\053\054\054\052\055\063\056" +
    "\uffbe\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\046\014\uffb6\024\uffb6\025\uffb6\027\uffb6" +
    "\033\uffb6\042\060\043\053\044\055\045\051\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\001\002\000\046\014\uffb3\024\uffb3\025\uffb3\027" +
    "\uffb3\033\uffb3\042\060\043\053\044\055\045\051\046\062" +
    "\047\057\050\064\051\061\052\056\053\054\054\052\055" +
    "\uffb3\056\uffb3\001\002\000\046\014\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\033\uffb8\042\060\043\053\044\055\045\051\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\001\002\000\046\014\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\033\uffb7\042\060\043\053\044\055\045\051" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\046\014\uffbb\024\uffbb" +
    "\025\uffbb\027\uffbb\033\uffbb\042\uffbb\043\uffbb\044\055\045" +
    "\051\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\001\002\000\046\014\uffb9\024" +
    "\uffb9\025\uffb9\027\uffb9\033\uffb9\042\060\043\053\044\055" +
    "\045\051\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000\046\014\uffb5" +
    "\024\uffb5\025\uffb5\027\uffb5\033\uffb5\042\060\043\053\044" +
    "\055\045\051\046\062\047\057\050\064\051\061\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002\000\046\014" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\033\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\046" +
    "\014\uffb4\024\uffb4\025\uffb4\027\uffb4\033\uffb4\042\060\043" +
    "\053\044\055\045\051\046\062\047\057\050\064\051\061" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001\002\000" +
    "\046\014\uffba\024\uffba\025\uffba\027\uffba\033\uffba\042\uffba" +
    "\043\uffba\044\055\045\051\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\001\002" +
    "\000\046\014\uffb2\024\uffb2\025\uffb2\027\uffb2\033\uffb2\042" +
    "\060\043\053\044\055\045\051\046\062\047\057\050\064" +
    "\051\061\052\056\053\054\054\uffb2\055\uffb2\056\uffb2\001" +
    "\002\000\046\014\uffbc\024\uffbc\025\uffbc\027\uffbc\033\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\001\002\000\046\014\uffc2\024\uffc2\025\uffc2\027\uffc2\033" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\030\005\036\026\043\034\032\035\042" +
    "\036\037\037\044\040\033\041\035\044\034\045\030\062" +
    "\040\001\002\000\034\042\060\043\053\044\055\045\051" +
    "\046\062\047\057\050\064\051\061\052\056\053\054\054" +
    "\052\055\063\056\104\001\002\000\030\005\036\026\043" +
    "\034\032\035\042\036\037\037\044\040\033\041\035\044" +
    "\034\045\030\062\040\001\002\000\034\027\106\042\060" +
    "\043\053\044\055\045\051\046\062\047\057\050\064\051" +
    "\061\052\056\053\054\054\052\055\063\001\002\000\046" +
    "\014\uffb1\024\uffb1\025\uffb1\027\uffb1\033\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000" +
    "\046\014\uffc1\024\uffc1\025\uffc1\027\uffc1\033\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002" +
    "\000\032\005\036\026\043\027\114\034\032\035\042\036" +
    "\037\037\044\040\033\041\035\044\034\045\030\062\040" +
    "\001\002\000\030\005\036\026\043\034\032\035\042\036" +
    "\037\037\044\040\033\041\035\044\034\045\030\062\040" +
    "\001\002\000\034\033\113\042\060\043\053\044\055\045" +
    "\051\046\062\047\057\050\064\051\061\052\056\053\054" +
    "\054\052\055\063\001\002\000\054\014\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\033\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002" +
    "\000\046\014\uffca\024\uffca\025\uffca\027\uffca\033\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\004\027\121\001\002\000\036\025\117\027\uffd2" +
    "\042\060\043\053\044\055\045\051\046\062\047\057\050" +
    "\064\051\061\052\056\053\054\054\052\055\063\001\002" +
    "\000\030\005\036\026\043\034\032\035\042\036\037\037" +
    "\044\040\033\041\035\044\034\045\030\062\040\001\002" +
    "\000\004\027\uffd3\001\002\000\046\014\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\033\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\001\002\000\046\014\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\033\uffbf\042\060\043\053\044\055\045" +
    "\051\046\062\047\057\050\064\051\061\052\056\053\054" +
    "\054\052\055\063\056\uffbf\001\002\000\046\014\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\033\uffc0\042\060\043\053\044\055" +
    "\045\051\046\062\047\057\050\064\051\061\052\056\053" +
    "\054\054\052\055\063\056\uffc0\001\002\000\012\014\ufff5" +
    "\026\125\032\127\057\025\001\002\000\014\007\010\010" +
    "\021\011\012\012\022\027\uffeb\001\002\000\004\014\133" +
    "\001\002\000\004\034\130\001\002\000\004\033\131\001" +
    "\002\000\004\014\132\001\002\000\040\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\030\ufff7\031\ufff7" +
    "\001\002\000\040\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\030\ufff8\031\ufff8\001\002\000\006\025" +
    "\254\027\uffe9\001\002\000\004\005\251\001\002\000\004" +
    "\027\uffec\001\002\000\004\027\140\001\002\000\004\030" +
    "\141\001\002\000\036\005\ufffc\006\020\007\010\010\021" +
    "\011\012\012\022\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\030\ufffc\031\ufffc\001\002\000\036\005\ufffc" +
    "\006\020\007\010\010\021\011\012\012\022\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\030\ufffc\031\ufffc" +
    "\001\002\000\004\005\247\001\002\000\024\005\154\015" +
    "\153\016\146\017\145\020\155\021\157\022\156\030\152" +
    "\031\uffe5\001\002\000\004\026\237\001\002\000\004\026" +
    "\233\001\002\000\010\057\226\060\224\061\225\001\002" +
    "\000\004\031\222\001\002\000\024\005\154\015\153\016" +
    "\146\017\145\020\155\021\157\022\156\030\152\031\uffe5" +
    "\001\002\000\036\005\ufffc\006\020\007\010\010\021\011" +
    "\012\012\022\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\030\ufffc\031\ufffc\001\002\000\004\026\205\001" +
    "\002\000\014\026\177\032\111\057\uffd5\060\uffd5\061\uffd5" +
    "\001\002\000\004\026\173\001\002\000\032\005\036\014" +
    "\170\026\043\034\032\035\042\036\037\037\044\040\033" +
    "\041\035\044\034\045\030\062\040\001\002\000\004\026" +
    "\160\001\002\000\032\005\036\026\043\027\uffcc\034\032" +
    "\035\042\036\037\037\044\040\033\041\035\044\034\045" +
    "\030\062\040\001\002\000\004\027\uffcd\001\002\000\004" +
    "\027\166\001\002\000\036\025\164\027\uffce\042\060\043" +
    "\053\044\055\045\051\046\062\047\057\050\064\051\061" +
    "\052\056\053\054\054\052\055\063\001\002\000\030\005" +
    "\036\026\043\034\032\035\042\036\037\037\044\040\033" +
    "\041\035\044\034\045\030\062\040\001\002\000\004\027" +
    "\uffcf\001\002\000\004\014\167\001\002\000\026\005\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\030\uffdf\031\uffdf\001\002\000\026\005\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\030" +
    "\uffdc\031\uffdc\001\002\000\034\014\172\042\060\043\053" +
    "\044\055\045\051\046\062\047\057\050\064\051\061\052" +
    "\056\053\054\054\052\055\063\001\002\000\026\005\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\030\uffdb\031\uffdb\001\002\000\030\005\036\026\043" +
    "\034\032\035\042\036\037\037\044\040\033\041\035\044" +
    "\034\045\030\062\040\001\002\000\004\027\175\001\002" +
    "\000\004\014\176\001\002\000\026\005\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\030\uffe0" +
    "\031\uffe0\001\002\000\032\005\036\026\043\027\200\034" +
    "\032\035\042\036\037\037\044\040\033\041\035\044\034" +
    "\045\030\062\040\001\002\000\004\014\204\001\002\000" +
    "\004\027\202\001\002\000\004\014\203\001\002\000\026" +
    "\005\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\030\uffdd\031\uffdd\001\002\000\026\005\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\030\uffde\031\uffde\001\002\000\030\005\036\026\043" +
    "\034\032\035\042\036\037\037\044\040\033\041\035\044" +
    "\034\045\030\062\040\001\002\000\034\027\207\042\060" +
    "\043\053\044\055\045\051\046\062\047\057\050\064\051" +
    "\061\052\056\053\054\054\052\055\063\001\002\000\022" +
    "\005\154\015\153\016\146\017\145\020\155\021\157\022" +
    "\156\030\152\001\002\000\026\005\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\212\030\uffd6\031" +
    "\uffd6\001\002\000\026\005\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\030\uffe4\031\uffe4\001" +
    "\002\000\022\005\154\015\153\016\146\017\145\020\155" +
    "\021\157\022\156\030\152\001\002\000\026\005\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\030\uffd7\031\uffd7\001\002\000\024\005\154\015\153\016" +
    "\146\017\145\020\155\021\157\022\156\030\152\031\uffe5" +
    "\001\002\000\004\031\216\001\002\000\030\005\ufff1\014" +
    "\220\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\030\ufff1\031\ufff1\001\002\000\026\005\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\030\uffd8\031\uffd8\001\002\000\040\005\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\004\031\uffe6\001\002\000\020\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\220\031\ufff1\001\002\000" +
    "\016\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\031\ufff4" +
    "\001\002\000\004\014\232\001\002\000\004\014\231\001" +
    "\002\000\030\005\036\026\043\034\032\035\042\036\037" +
    "\037\044\040\033\041\035\044\034\045\030\062\040\001" +
    "\002\000\034\014\230\042\060\043\053\044\055\045\051" +
    "\046\062\047\057\050\064\051\061\052\056\053\054\054" +
    "\052\055\063\001\002\000\026\005\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\030\uffe2\031" +
    "\uffe2\001\002\000\026\005\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\030\uffd9\031\uffd9\001" +
    "\002\000\026\005\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\030\uffda\031\uffda\001\002\000" +
    "\030\005\036\026\043\034\032\035\042\036\037\037\044" +
    "\040\033\041\035\044\034\045\030\062\040\001\002\000" +
    "\034\027\235\042\060\043\053\044\055\045\051\046\062" +
    "\047\057\050\064\051\061\052\056\053\054\054\052\055" +
    "\063\001\002\000\022\005\154\015\153\016\146\017\145" +
    "\020\155\021\157\022\156\030\152\001\002\000\026\005" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\030\uffe3\031\uffe3\001\002\000\004\005\240\001" +
    "\002\000\010\025\uffd5\027\uffd5\032\111\001\002\000\006" +
    "\025\245\027\uffd0\001\002\000\004\027\243\001\002\000" +
    "\004\014\244\001\002\000\026\005\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\030\uffe1\031" +
    "\uffe1\001\002\000\004\005\240\001\002\000\004\027\uffd1" +
    "\001\002\000\010\014\ufff5\032\127\057\025\001\002\000" +
    "\024\005\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\030\ufffd\031\ufffd\001\002\000\010\025\uffe8\027" +
    "\uffe8\032\252\001\002\000\004\033\253\001\002\000\006" +
    "\025\uffe7\027\uffe7\001\002\000\012\007\010\010\021\011" +
    "\012\012\022\001\002\000\004\027\uffea\001\002\000\004" +
    "\026\257\001\002\000\014\007\010\010\021\011\012\012" +
    "\022\027\uffeb\001\002\000\004\027\261\001\002\000\004" +
    "\030\262\001\002\000\036\005\ufffc\006\020\007\010\010" +
    "\021\011\012\012\022\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\030\ufffc\031\ufffc\001\002\000\024\005" +
    "\154\015\153\016\146\017\145\020\155\021\157\022\156" +
    "\030\152\031\uffe5\001\002\000\004\031\265\001\002\000" +
    "\020\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\220" +
    "\031\ufff1\001\002\000\016\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\031\ufff3\001\002\000\004\031\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\031\ufffb\001\002\000" +
    "\004\005\273\001\002\000\004\026\125\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\012\004\013" +
    "\005\010\010\016\017\014\001\001\000\002\001\001\000" +
    "\010\005\010\010\271\017\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\266\004\013\005\010\010" +
    "\016\017\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\025" +
    "\001\001\000\006\014\030\015\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\030\015\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\030\015\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\030\015\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\045" +
    "\014\030\015\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\030\015\047\001\001" +
    "\000\002\001\001\000\006\014\030\015\077\001\001\000" +
    "\006\014\030\015\076\001\001\000\006\014\030\015\075" +
    "\001\001\000\006\014\030\015\074\001\001\000\006\014" +
    "\030\015\073\001\001\000\006\014\030\015\072\001\001" +
    "\000\006\014\030\015\071\001\001\000\006\014\030\015" +
    "\070\001\001\000\006\014\030\015\067\001\001\000\006" +
    "\014\030\015\066\001\001\000\006\014\030\015\065\001" +
    "\001\000\006\014\030\015\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\030" +
    "\015\102\001\001\000\002\001\001\000\006\014\030\015" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\030\015\115\020\114\001\001\000" +
    "\006\014\030\015\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\030\015\115\020\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\125\001\001\000\012\010\134\011\133" +
    "\024\135\025\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\141\010\142\016\143\001\001\000\010\004\141\010" +
    "\142\016\247\001\001\000\002\001\001\000\010\012\150" +
    "\014\146\026\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\150" +
    "\014\146\026\220\001\001\000\010\004\141\010\142\016" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\030\015\170\001\001\000\002\001" +
    "\001\000\012\014\030\015\162\022\160\023\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\030\015\162\022\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\030\015\162" +
    "\022\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\030\015\115\020\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\030\015\205" +
    "\001\001\000\002\001\001\000\006\012\207\014\146\001" +
    "\001\000\004\013\210\001\001\000\002\001\001\000\006" +
    "\012\212\014\146\001\001\000\002\001\001\000\010\012" +
    "\150\014\146\026\214\001\001\000\002\001\001\000\004" +
    "\007\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\030\015" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\030\015\233\001" +
    "\001\000\002\001\001\000\006\012\235\014\146\001\001" +
    "\000\002\001\001\000\006\014\240\021\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\240\021\245\001" +
    "\001\000\002\001\001\000\004\006\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\134\011\133\024\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\134\011\133\024" +
    "\135\025\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\141\010\142\016\262\001\001\000\010\012" +
    "\150\014\146\026\263\001\001\000\002\001\001\000\004" +
    "\007\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS ID LEFTCBR memberdecls RIGHTCBR 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int membdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int membdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls membdecl = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(id, membdecl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              Memberdecls RESULT =null;
		int fdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fdecl = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int membdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int membdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Memberdecls membdecls = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(fdecl, membdecls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              Memberdecls RESULT =null;
		int methdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Methoddecl> methdecls = (ArrayList<Methoddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(methdecls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              ArrayList<Fielddecl> RESULT =null;
		int fdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fdecl = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Fielddecl> fdecls = (ArrayList<Fielddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fdecls.add(0,fdecl); RESULT = fdecls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              ArrayList<Fielddecl> RESULT =null;
		 RESULT = new ArrayList<Fielddecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              ArrayList<Methoddecl> RESULT =null;
		int methdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int methdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl methdecl = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int methdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Methoddecl> methdecls = (ArrayList<Methoddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 methdecls.add(0,methdecl); RESULT = methdecls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              ArrayList<Methoddecl> RESULT =null;
		 RESULT = new ArrayList<Methoddecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddecl ::= FINAL type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optionalexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optionalexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr optionalex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(tp, id, optionalex, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecl ::= type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optionalexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optionalexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr optionalex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(tp, id, optionalex, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= type ID LEFTSBR INTLIT RIGHTSBR SEMI 
            {
              Fielddecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String len = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(tp, id, Integer.parseInt(len));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optionalexpr ::= ASSIGN expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalexpr ::= 
            {
              Expr RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= type ID LEFTBR argdecls RIGHTBR LEFTCBR fielddecls stmts RIGHTCBR optionalsemi 
            {
              Methoddecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int adeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int adeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Argdecl> adecls = (ArrayList<Argdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Fielddecl> fdecls = (ArrayList<Fielddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stmt> sts = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(tp, id, adecls, fdecls, sts, opsemi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methoddecl ::= VOID ID LEFTBR argdecls RIGHTBR LEFTCBR fielddecls stmts RIGHTCBR optionalsemi 
            {
              Methoddecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int adeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int adeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Argdecl> adecls = (ArrayList<Argdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Fielddecl> fdecls = (ArrayList<Fielddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stmt> sts = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl("void", id, adecls, fdecls, sts, opsemi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalsemi ::= SEMI 
            {
              Boolean RESULT =null;
		 RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalsemi ::= 
            {
              Boolean RESULT =null;
		 RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argdecls ::= argdecllist 
            {
              ArrayList<Argdecl> RESULT =null;
		int adecllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adecllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Argdecl> adecllist = (ArrayList<Argdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = adecllist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argdecls ::= 
            {
              ArrayList<Argdecl> RESULT =null;
		 RESULT = new ArrayList<Argdecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argdecllist ::= argdecl COM argdecllist 
            {
              ArrayList<Argdecl> RESULT =null;
		int adeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int adeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl adecl = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adecllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adecllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Argdecl> adecllist = (ArrayList<Argdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 adecllist.add(0,adecl); RESULT = adecllist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdecllist ::= argdecl 
            {
              ArrayList<Argdecl> RESULT =null;
		int adeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl adecl = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Argdecl> argarray = new ArrayList<Argdecl>(); argarray.add(adecl); RESULT = argarray;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecl(tp, id, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecl ::= type ID LEFTSBR RIGHTSBR 
            {
              Argdecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Argdecl(tp, id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmts ::= stmt stmts 
            {
              ArrayList<Stmt> RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt stm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stmt> stms = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stms.add(0,stm); RESULT = stms;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmts ::= 
            {
              ArrayList<Stmt> RESULT =null;
		 RESULT = new ArrayList<Stmt>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= IF LEFTBR expr RIGHTBR stmt Ifend 
            {
              Stmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt stm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifendstmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifendstmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt ifendstm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(ex, stm, ifendstm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= WHILE LEFTBR expr RIGHTBR stmt 
            {
              Stmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt stm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(ex, stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= name ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(nm, ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= READ LEFTBR readlist RIGHTBR SEMI 
            {
              Stmt RESULT =null;
		int rdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Name> rdlist = (ArrayList<Name>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt("read", rdlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= PRINT LEFTBR printlist RIGHTBR SEMI 
            {
              Stmt RESULT =null;
		int prntlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prntlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> prntlist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt("print", prntlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= PRINTLINE LEFTBR printlinelist RIGHTBR SEMI 
            {
              Stmt RESULT =null;
		int prntlnlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prntlnlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> prntlnlist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt("printline", prntlnlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= ID LEFTBR RIGHTBR SEMI 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Stmt(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= ID LEFTBR args RIGHTBR SEMI 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> ags = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(id, ags, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= name INC SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(nm, "++");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= name DEC SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(nm, "--");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= LEFTCBR fielddecls stmts RIGHTCBR optionalsemi 
            {
              Stmt RESULT =null;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Fielddecl> fdecls = (ArrayList<Fielddecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stmt> stms = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(fdecls, stms, opsemi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ifend ::= ELSE stmt 
            {
              Stmt RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt stm = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stm;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ifend",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Ifend ::= 
            {
              Stmt RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ifend",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // name ::= ID 
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // name ::= ID LEFTSBR expr RIGHTSBR 
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(id, ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // args ::= expr COM args 
            {
              ArrayList<Expr> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> ags = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ags.add(0,ex); RESULT = ags;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> exarray = new ArrayList<Expr>(); exarray.add(ex); RESULT = exarray;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // readlist ::= name COM readlist 
            {
              ArrayList<Name> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Name> rdlist = (ArrayList<Name>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 rdlist.add(0,nm); RESULT = rdlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // readlist ::= name 
            {
              ArrayList<Name> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Name> nmarray = new ArrayList<Name>(); nmarray.add(nm); RESULT = nmarray;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // printlist ::= expr COM printlist 
            {
              ArrayList<Expr> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prntlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prntlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> prntlist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 prntlist.add(0,ex); RESULT = prntlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // printlist ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> exarray = new ArrayList<Expr>(); exarray.add(ex); RESULT = exarray;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printlinelist ::= printlist 
            {
              ArrayList<Expr> RESULT =null;
		int prntlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prntlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> prntlist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = prntlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printlinelist ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= name 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name nm = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(nm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= ID LEFTBR RIGHTBR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= ID LEFTBR args RIGHTBR 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> args = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(id, args);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int intltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String intlt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(Integer.parseInt(intlt));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int charltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charlt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(charlt, 'c');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= STRINGLIT 
            {
              Expr RESULT =null;
		int stringltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringlt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(stringlt, 's');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int floatltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floatltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String floatlt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(Float.parseFloat(floatlt));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LEFTBR expr RIGHTBR 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex, "~");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex, "-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex, "+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= LEFTBR type RIGHTBR expr 
            {
              Expr RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(tp, ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("+"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("-"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("*"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("/"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop(">"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("<"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr GEQ expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop(">="), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr LEQ expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("<="), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr EEQ expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("=="), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr NEQ expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("<>"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("||"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(ex1, new Binaryop("&&"), ex2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= LEFTBR expr QUES expr COL expr RIGHTBR 
            {
              Expr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ex3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ex3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(ex1, ex2, ex3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
